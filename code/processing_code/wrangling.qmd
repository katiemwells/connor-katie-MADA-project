---
title: "Wrangling"
format:
  html:
    theme: darkly
---


## Wrangling the data

## Loading packages
```{r}
# load a few R packages
library(here)
library(readr)
library(readxl)
library(knitr)
library(tidyverse)
library(lubridate)

```

## Importing the raw data
```{r}
## Loading the full-raw data set...
Raw_USVac <- read_csv(here("data", "raw_data" , "COVID-19_Vaccinations_in_the_United_States_Jurisdiction.csv"))



# Check data
str(Raw_USVac)

summary(Raw_USVac)



# Format date variable.
Raw_USVac$Date <- mdy(Raw_USVac$Date)


# Save raw data
write_rds(Raw_USVac, file = "../../data/raw_data/raw_data.rds")



# Load full-raw supplementary data set (Income)...
Raw_Sup_Data_Income <- read_csv(here("data", "raw_data", "ACS21.csv"))

glimpse(Raw_Sup_Data_Income)


# Load full-raw supplementary data set (Education)...
Raw_Sup_Data_Edu <- read_excel(here("data", "raw_data", "ACS21Edu.xlsx"))

glimpse(Raw_Sup_Data_Edu)

```


## Sub data
```{r}
# Filter for only the date range we care about (21 - 22)
SubData <- Raw_USVac %>%
  filter(Date > '2021-02-01' & Date < '2021-12-31')



## Vacccine Distribution Overtime by Manufac. US Wide
DisTime <- SubData %>%
  dplyr::group_by(`Date`) %>%
  dplyr::select(`Date`, 5:8) %>%
  pivot_longer(!Date, names_to = "Vacc_Dist", values_to = "Count")

Graph_DisTime <- DisTime %>%
  drop_na(Count)%>%
  ggplot(mapping = aes(x = Date, y = Count, fill = Vacc_Dist)) +
  geom_area() +
  ggtitle("Vaccine distribution over time")
Graph_DisTime



## Vaccine Administration Overtime by Manufac. US Wide
AdminTime <- SubData %>%
  dplyr::group_by(`Date`) %>%
  dplyr::select(`Date`, 20:23) %>%
  pivot_longer(!Date, names_to = "Vacc_Admin", values_to = "Count")

SubData <- SubData %>%
  dplyr::mutate(Region = case_when(
    (`Location` %in% c("ME", "VT", "NH", "MA", "CT", "RI", "NY", "NJ", "PA", "DE", "MD")) ~ "NorthEast",
    (`Location` %in% c("WV", "VA", "KY", "NC", "TN", "AR", "LA", "MS", "AL", "GA", "FL", "SC")) ~ "SouthEast",
    (`Location` %in% c("SD", "NE", "KS", "MN", "IA", "MO", "WI", "IL", "MI", "IN", "OH", "ND")) ~ "MidWest",
    (`Location` %in% c("OK", "TX", "NM", "AZ")) ~ "SouthWest",
    (`Location` %in% c("WA", "OR", "CA", "NV", "ID", "MT", "WY", "CO", "HI", "AK", "UT")) ~ "West"
  )) %>%
  drop_na(Region)



AdminBar <- SubData %>%
  dplyr::select(`Region`, 20:23) %>%
  group_by(`Region`)



AdminBar3 <- SubData %>%
  dplyr::select(`Region`, 20:23) %>%
  tidyr::drop_na(everything()) %>%
  dplyr::group_by(`Region`) %>%
  dplyr::summarise(JanssenCount = sum(`Administered_Janssen`),
                   ModernaCount = sum(`Administered_Moderna`),
                   PfizerCount = sum(`Administered_Pfizer`),
                   NovavaxCount = sum(`Administered_Novavax`)) %>%
  pivot_longer(!Region, names_to = "Vacc_man", values_to = "Count")



# Graphing

## Southeast Region
RegionSoutheast <- AdminBar3 %>%
  dplyr::filter(Region == "SouthEast") %>%
  dplyr::select(2:3)


## Northeast Region
RegionNortheast <- AdminBar3 %>%
  dplyr::filter(Region == "NorthEast") %>%
  dplyr::select(2:3)


## MidWest Region
RegionMidwest <- AdminBar3 %>%
  dplyr::filter(Region == "MidWest") %>%
  dplyr::select(2:3)


## SouthWest Region
RegionSouthwest <- AdminBar3 %>%
  dplyr::filter(Region == "SouthWest") %>%
  dplyr::select(2:3)


## West Region
RegionWest <- AdminBar3 %>%
  dplyr::filter(Region == "West") %>%
  dplyr::select(2:3)



# Prepare for exploration
AdminBar3$Region <- as.factor(AdminBar3$Region)

AdminBar3$Count <- as.numeric(AdminBar3$Count)

RegionSoutheast$Vacc_man <- as.character(RegionSoutheast$Vacc_man)

RegionNortheast$Vacc_man <- as.character(RegionNortheast$Vacc_man)

RegionMidwest$Vacc_man <- as.character(RegionMidwest$Vacc_man)

RegionSouthwest$Vacc_man <- as.character(RegionSouthwest$Vacc_man)

RegionWest$Vacc_man <- as.character(RegionWest$Vacc_man)





## Saving processed data
write_rds(SubData, file = "../../data/processed_data/SubData.rds")
write_csv(SubData, file = "../../data/processed_data/SubData.csv")


```


## Clean Supplementary DataSet and Join (Income)
```{r}
clean_sup <- Raw_Sup_Data_Income %>%
  select(!contains("Margin of Error")) %>%
  filter(!row_number() %in% c(14, 15, 16, 17))

clean_sup_long <- clean_sup %>%
  t()

clean_sup_long <- as.data.frame(clean_sup_long)

clean_sup_long <- clean_sup_long %>% 
  janitor::row_to_names(row_number = 1)

row.names(clean_sup_long) <- sub('!!Households!!Estimate', '', row.names(clean_sup_long))

clean_sup_long$State <- state.abb[match(row.names(clean_sup_long),state.name)]

clean_sup_long <- clean_sup_long %>%
  filter(!row_number() %in% c(51))

clean_sup_long <- clean_sup_long %>%
  dplyr::mutate(Region = case_when(
    (`State` %in% c("ME", "VT", "NH", "MA", "CT", "RI", "NY", "NJ", "PA", "DE", "MD")) ~ "NorthEast",
    (`State` %in% c("DC", "WV", "VA", "KY", "NC", "TN", "AR", "LA", "MS", "AL", "GA", "FL", "SC")) ~ "SouthEast",
    (`State` %in% c("NA", "SD", "NE", "KS", "MN", "IA", "MO", "WI", "IL", "MI", "IN", "OH")) ~ "MidWest",
    (`State` %in% c("OK", "TX", "NM", "AZ")) ~ "SouthWest",
    (`State` %in% c("WA", "OR", "CA", "NV", "ID", "MT", "WY", "CO", "HI", "AK")) ~ "West"
  ))

clean_sup_long <- clean_sup_long %>%
  remove_rownames()

clean_sup_long <- clean_sup_long %>%
  relocate(State, .before = Total)

SubData <- rename(SubData, State = Location)

SubData <- SubData %>%
  relocate(State, .before = MMWR_week)

Clean_Complete <- inner_join(SubData, clean_sup_long, by = "State")

Clean_Complete <- Clean_Complete %>%
  select(!"Region.y")

Clean_Complete <- Clean_Complete %>%
  select(!contains(c("Bivalent", "Additional", "Booster")))

Clean_Complete <- rename(Clean_Complete, Region = Region.x)

Clean_Complete <- Clean_Complete %>%
  filter(MMWR_week == 52)

Clean_Complete <- Clean_Complete %>%
  filter(Date == "2021-12-30")


Clean_Complete <- Clean_Complete %>%
  select(!contains(c("Dist", "Distributed", "Per", "Dose", "Pct", "Unk")))

Clean_Complete$`Median income (dollars)` <- sub(',', '', Clean_Complete$`Median income (dollars)`)  

Clean_Complete$`Median income (dollars)` <- as.numeric(Clean_Complete$`Median income (dollars)`)

# U.S. Median household income for 2021 $69,717
## Bin / Create binary predictor

Clean_Complete <- Clean_Complete %>%
  mutate(Median_Binary = case_when((`Median income (dollars)` > 69717 ~ 1),
                                   `Median income (dollars)`< 69717 ~ 0))
Clean_Complete <- Clean_Complete %>%
  mutate(Mean_Binary = case_when((`Mean income (dollars)` > 97962 ~ 1),
                                 `Mean income (dollars)` < 97962 ~ 0))

saveRDS(Clean_Complete, file = "../../data/processed_data/Clean_Complete.rds")

```



## Clean supplementary dataset and join (Edu)
```{r}
Clean_edu <- Raw_Sup_Data_Edu %>%
  select(!contains(c("Male", "Female", "Percent"))) %>%
  filter(!row_number() %in% c(29:68))

clean_sup_long_edu <- Clean_edu %>%
  t()

clean_sup_long_edu <- as.data.frame(clean_sup_long_edu)

clean_sup_long_edu <- clean_sup_long_edu %>% 
  janitor::row_to_names(row_number = 1)

row.names(clean_sup_long_edu) <- sub('!!Total!!Estimate', '', row.names(clean_sup_long_edu))


clean_sup_long_edu$State <- state.abb[match(row.names(clean_sup_long_edu),state.name)]



clean_sup_long_edu <- clean_sup_long_edu %>%
  remove_rownames()

clean_sup_long_edu <- clean_sup_long_edu %>%
  relocate(State, .before = `AGE BY EDUCATIONAL ATTAINMENT`)



##### Unable to run this portion down. Can't get rid of duplicate columns without coverting character to numeric. Can't convert to numberic without getting rid of duplicate columns. Unsure where to go.

#clean_sup_long_edu <- clean_sup_long_edu %>%
#  mutate_if(is.character, as.numeric)
            
#clean_sup_long_edu <- as.data.frame(do.call(cbind, by(t(clean_sup_long_edu), INDICES = names(clean_sup_long_edu), FUN = colSums)))

#clean_sup_long_edu <- clean_sup_long_edu %>%
#  select(!contains(c("AGE BY", "Population")))

#Clean_Complete <- inner_join(Clean_Complete, clean_sup_long_edu, by = "State")

```